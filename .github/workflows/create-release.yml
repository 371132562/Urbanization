# 这个工作流文件的作用是：当代码被推送到 master 分支时，
# 自动将四个客户端所需的文件分别打包成 zip，并在一个 GitHub Release 中包含所有文件。

name: 创建多客户端发布包

# 触发条件：当代码被推送到 master 分支时自动执行
on:
  push:
    branches:
      - master

# 并发控制：自动取消旧的、正在进行中的工作流
# 这确保同一时间只有一个工作流在运行，避免资源冲突
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 授予工作流写权限，以便它可以创建 Release
# 这是创建 GitHub Release 所必需的权限
permissions:
  contents: write

jobs:
  # 第一个任务：并行构建所有客户端
  build-clients:
    name: 构建所有客户端
    runs-on: ubuntu-latest
    # 使用矩阵策略并行构建四个不同的客户端
    strategy:
      matrix:
        client:
          # 主客户端配置
          - name: main
            dockerfile: ./Dockerfile
            docker_compose: docker-compose.yml
            start_script: start.ps1
            image_tag: linstar666/urbanization:latest
            zip_name: urbanization.zip
            description: 主客户端运行文件
          # 数据管理客户端配置
          - name: data
            dockerfile: ./Dockerfile.data
            docker_compose: docker-compose.data.yml
            start_script: start-data.ps1
            image_tag: linstar666/urbanization-data:latest
            zip_name: urbanization-data.zip
            description: 数据管理客户端运行文件
          # 评估管理客户端配置
          - name: evaluation
            dockerfile: ./Dockerfile.evaluation
            docker_compose: docker-compose.evaluation.yml
            start_script: start-evaluation.ps1
            image_tag: linstar666/urbanization-evaluation:latest
            zip_name: urbanization-evaluation.zip
            description: 评估管理客户端运行文件
          # 评分管理客户端配置
          - name: score
            dockerfile: ./Dockerfile.score
            docker_compose: docker-compose.score.yml
            start_script: start-score.ps1
            image_tag: linstar666/urbanization-score:latest
            zip_name: urbanization-score.zip
            description: 评分管理客户端运行文件
          # 综合评价客户端配置
          - name: comprehensive
            dockerfile: ./Dockerfile.comprehensive
            docker_compose: docker-compose.comprehensive.yml
            start_script: start-comprehensive.ps1
            image_tag: linstar666/urbanization-comprehensive:latest
            zip_name: urbanization-comprehensive.zip
            description: 综合评价客户端运行文件
          # 城镇化进程客户端配置
          - name: urbanization
            dockerfile: ./Dockerfile.urbanization
            docker_compose: docker-compose.urbanization.yml
            start_script: start-urbanization.ps1
            image_tag: linstar666/urbanization-urbanization:latest
            zip_name: urbanization-urbanization.zip
            description: 城镇化进程客户端运行文件
          # 迁移动力客户端配置
          - name: human
            dockerfile: ./Dockerfile.human
            docker_compose: docker-compose.human.yml
            start_script: start-human.ps1
            image_tag: linstar666/urbanization-human:latest
            zip_name: urbanization-human.zip
            description: 迁移动力客户端运行文件
          # 经济动力客户端配置
          - name: material
            dockerfile: ./Dockerfile.material
            docker_compose: docker-compose.material.yml
            start_script: start-material.ps1
            image_tag: linstar666/urbanization-material:latest
            zip_name: urbanization-material.zip
            description: 经济动力客户端运行文件
          # 空间动力客户端配置
          - name: spatial
            dockerfile: ./Dockerfile.spatial
            docker_compose: docker-compose.spatial.yml
            start_script: start-spatial.ps1
            image_tag: linstar666/urbanization-spatial:latest
            zip_name: urbanization-spatial.zip
            description: 空间动力客户端运行文件
    # 定义输出，用于后续任务使用（虽然这里没有直接使用，但保留以备将来扩展）
    outputs:
      zip-files: ${{ steps.package.outputs.zip-files }}
    steps:
      # 步骤1：检出代码到工作目录
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 获取所有历史记录，以便能创建正确的变更日志（如果需要）
          # 这对于生成完整的 git 历史很有用
          fetch-depth: 0

      # 步骤2：设置 Docker Buildx
      # Buildx 是 Docker 的扩展构建功能，支持多平台构建和缓存优化
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤3：登录到 Docker Hub
      # 这是推送镜像到 Docker Hub 所必需的认证步骤
      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          # 使用 GitHub Secrets 中存储的 Docker Hub 凭据
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 步骤4：构建、推送并导出镜像
      # 这是核心步骤，负责构建 Docker 镜像并导出为 tar 包
      - name: 构建、推送并导出镜像
        uses: docker/build-push-action@v6
        with:
          # 构建上下文：当前目录
          context: .
          # 使用矩阵中指定的 Dockerfile
          file: ${{ matrix.client.dockerfile }}
          # 推送到 Docker Hub
          push: true
          # 使用矩阵中指定的镜像标签
          tags: ${{ matrix.client.image_tag }}
          # 构建参数：指定数据库文件路径
          build-args: |
            DATABASE_URL_BUILD=file:../../db/urbanization.db
          # 输出设置：将镜像导出为与 docker load 兼容的 tar 包
          # 这样客户端就可以直接加载镜像，无需从网络下载
          outputs: type=docker,dest=./urbanization.tar

      # 步骤5：拉取 alpine 镜像
      # Alpine 是一个轻量级的 Linux 发行版，用作基础镜像
      - name: 拉取 alpine 镜像
        run: docker pull alpine:latest

      # 步骤6：保存 alpine 镜像为 tar 包
      # 将 alpine 镜像保存为 tar 包，以便客户端离线使用
      - name: 保存 alpine 镜像为 tar 包
        run: docker save alpine:latest -o alpine.tar

      # 步骤7：重命名docker-compose文件（仅对非主客户端）
      # 主客户端使用默认的 docker-compose.yml，其他客户端需要重命名
      - name: 重命名docker-compose文件
        # 条件判断：只有非主客户端才需要重命名
        if: matrix.client.name != 'main'
        run: cp ${{ matrix.client.docker_compose }} docker-compose.yml

      # 步骤8：重命名start脚本（仅对非主客户端）
      # 主客户端使用默认的 start.ps1，其他客户端需要重命名
      - name: 重命名start脚本
        # 条件判断：只有非主客户端才需要重命名
        if: matrix.client.name != 'main'
        run: cp ${{ matrix.client.start_script }} start.ps1

      # 步骤9：打包发布文件
      # 将所有必要的文件打包成 zip，供客户端下载使用
      - name: 打包发布文件
        id: package
        run: |
          zip ${{ matrix.client.zip_name }} docker-compose.yml 使用说明.txt \
          start.ps1 backup.ps1 restore.ps1 entrypoint.sh urbanization.tar alpine.tar
          echo "zip-files=${{ matrix.client.zip_name }}" >> $GITHUB_OUTPUT

      # 步骤10：上传构建产物
      # 将生成的 zip 文件上传为构建产物，供后续任务下载使用
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          # 构建产物的名称，使用 zip 文件名
          name: ${{ matrix.client.zip_name }}
          # 要上传的文件路径
          path: ${{ matrix.client.zip_name }}
          # 保留天数：1天，因为构建产物只是临时使用
          retention-days: 1

  # 第二个任务：创建统一的 GitHub Release
  create-release:
    name: 创建统一发布
    runs-on: ubuntu-latest
    # 依赖关系：必须等待所有客户端构建完成后才能执行
    needs: build-clients
    steps:
      # 步骤1：下载所有构建产物
      # 从之前的任务中下载所有客户端的 zip 文件
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          # 下载到 artifacts 目录
          path: ./artifacts
          # 只下载 zip 文件，避免下载 Docker 构建产物
          pattern: "*.zip"
          # 合并所有文件到一个目录，避免创建子目录
          merge-multiple: true

      # 步骤2：验证下载的文件
      # 检查是否成功下载了所有客户端的 zip 文件
      - name: 验证下载的文件
        run: |
          echo "检查下载的文件："
          ls -la ./artifacts/
          echo "期望的文件："
          echo "- urbanization.zip"
          echo "- urbanization-data.zip" 
          echo "- urbanization-evaluation.zip"
          echo "- urbanization-score.zip"
          echo "- urbanization-comprehensive.zip"
          echo "- urbanization-urbanization.zip"
          echo "- urbanization-human.zip"
          echo "- urbanization-material.zip"
          echo "- urbanization-spatial.zip"
          
          # 检查文件是否存在
          if [ ! -f "./artifacts/urbanization.zip" ]; then
            echo "错误：缺少 urbanization.zip"
            exit 1
          fi
          if [ ! -f "./artifacts/urbanization-data.zip" ]; then
            echo "错误：缺少 urbanization-data.zip"
            exit 1
          fi
          if [ ! -f "./artifacts/urbanization-evaluation.zip" ]; then
            echo "错误：缺少 urbanization-evaluation.zip"
            exit 1
          fi
          if [ ! -f "./artifacts/urbanization-score.zip" ]; then
            echo "错误：缺少 urbanization-score.zip"
            exit 1
          fi
          if [ ! -f "./artifacts/urbanization-comprehensive.zip" ]; then
            echo "错误：缺少 urbanization-comprehensive.zip"
            exit 1
          fi
          if [ ! -f "./artifacts/urbanization-urbanization.zip" ]; then
            echo "错误：缺少 urbanization-urbanization.zip"
            exit 1
          fi
          if [ ! -f "./artifacts/urbanization-human.zip" ]; then
            echo "错误：缺少 urbanization-human.zip"
            exit 1
          fi
          if [ ! -f "./artifacts/urbanization-material.zip" ]; then
            echo "错误：缺少 urbanization-material.zip"
            exit 1
          fi
          if [ ! -f "./artifacts/urbanization-spatial.zip" ]; then
            echo "错误：缺少 urbanization-spatial.zip"
            exit 1
          fi
          echo "✅ 所有文件下载成功！"

      # 步骤3：创建八个副本的整合包
      # 将八个副本的zip文件打包成一个整合包，方便用户一次性下载所有副本
      - name: 创建八个副本整合包
        run: |
          echo "正在创建八个副本的整合包..."
          cd ./artifacts
          zip urbanization-all-clients.zip \
            urbanization-data.zip \
            urbanization-evaluation.zip \
            urbanization-score.zip \
            urbanization-comprehensive.zip \
            urbanization-urbanization.zip \
            urbanization-human.zip \
            urbanization-material.zip \
            urbanization-spatial.zip
          echo "✅ 整合包创建成功：urbanization-all-clients.zip"
          ls -la urbanization-all-clients.zip

      # 步骤4：生成版本号 (北京时间)
      # 使用北京时间生成版本号，格式为 YYYYMMDD-HHMM
      - name: 生成版本号 (北京时间)
        id: version
        run: echo "tag=$(TZ='Asia/Shanghai' date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      # 步骤5：创建 GitHub Release
      # 使用第三方 Action 创建 GitHub Release，包含所有客户端的文件
      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Release 标签名，使用生成的版本号
          tag_name: release-v${{ steps.version.outputs.tag }}
          # Release 标题
          name: "多客户端运行包 v${{ steps.version.outputs.tag }}"
          # Release 详细说明，包含每个客户端的介绍和使用方法
          body: |
            自动打包的多客户端运行文件 (PowerShell 版本)。
            
            本次发布包含了九个客户端的完整运行包：
            
            ## 📦 包含的客户端
            
            ### 1. 主客户端 (`urbanization.zip`)
            - 使用说明文档 (`使用说明.txt`)
            - Docker Compose 配置文件 (`docker-compose.yml`)
            - Docker启动脚本 (`entrypoint.sh`)
            - 本地镜像包 (`urbanization.tar` 和 `alpine.tar`)
            - PowerShell 脚本:
              - 启动应用: `start.ps1`
              - 备份数据: `backup.ps1` 
              - 恢复数据: `restore.ps1`
            
            ### 2. 数据管理客户端 (`urbanization-data.zip`)
            - 专门用于数据管理功能
            - 包含所有必要的运行文件
            
            ### 3. 评估管理客户端 (`urbanization-evaluation.zip`)
            - 专门用于评估管理功能
            - 包含所有必要的运行文件
            
            ### 4. 评分管理客户端 (`urbanization-score.zip`)
            - 专门用于评分管理功能
            - 包含所有必要的运行文件
            
            ### 5. 综合评价客户端 (`urbanization-comprehensive.zip`)
            - 专门用于综合评价功能
            - 包含所有必要的运行文件
            
            ### 6. 城镇化进程客户端 (`urbanization-urbanization.zip`)
            - 专门用于城镇化进程功能
            - 包含所有必要的运行文件
            
            ### 7. 迁移动力客户端 (`urbanization-human.zip`)
            - 专门用于迁移动力功能
            - 包含所有必要的运行文件
            
            ### 8. 经济动力客户端 (`urbanization-material.zip`)
            - 专门用于经济动力功能
            - 包含所有必要的运行文件
            
            ### 9. 空间动力客户端 (`urbanization-spatial.zip`)
            - 专门用于空间动力功能
            - 包含所有必要的运行文件
            
            ### 10. 八个副本整合包 (`urbanization-all-clients.zip`)
            - 包含所有八个副本的完整运行包
            - 一次性下载所有副本，方便批量部署
            - 包含文件：
              - urbanization-data.zip (数据管理)
              - urbanization-evaluation.zip (评估管理)
              - urbanization-score.zip (评分管理)
              - urbanization-comprehensive.zip (综合评价)
              - urbanization-urbanization.zip (城镇化进程)
              - urbanization-human.zip (迁移动力)
              - urbanization-material.zip (经济动力)
              - urbanization-spatial.zip (空间动力)
            
            ## 🚀 使用方法
            
            请根据您的需求下载对应的客户端包：
            - 如果需要完整功能，下载 `urbanization.zip`
            - 如果只需要数据管理功能，下载 `urbanization-data.zip`
            - 如果只需要评估管理功能，下载 `urbanization-evaluation.zip`
            - 如果只需要评分管理功能，下载 `urbanization-score.zip`
            - 如果只需要综合评价功能，下载 `urbanization-comprehensive.zip`
            - 如果只需要城镇化进程功能，下载 `urbanization-urbanization.zip`
            - 如果只需要迁移动力功能，下载 `urbanization-human.zip`
            - 如果只需要经济动力功能，下载 `urbanization-material.zip`
            - 如果只需要空间动力功能，下载 `urbanization-spatial.zip`
            - 如果需要所有八个副本，下载 `urbanization-all-clients.zip`
            
            下载后解压即可使用。
          # 指定要包含在 Release 中的文件
          # 使用多行格式列出所有客户端的 zip 文件
          files: |
            ./artifacts/urbanization.zip
            ./artifacts/urbanization-data.zip
            ./artifacts/urbanization-evaluation.zip
            ./artifacts/urbanization-score.zip
            ./artifacts/urbanization-comprehensive.zip
            ./artifacts/urbanization-urbanization.zip
            ./artifacts/urbanization-human.zip
            ./artifacts/urbanization-material.zip
            ./artifacts/urbanization-spatial.zip
            ./artifacts/urbanization-all-clients.zip 