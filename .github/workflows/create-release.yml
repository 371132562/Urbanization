# 这个工作流文件的作用是：当代码被推送到 master 分支时，
# 自动将四个客户端所需的文件分别打包成 zip，并创建对应的 GitHub Release。

name: 创建多客户端发布包

on:
  push:
    branches:
      - master

# 并发控制：自动取消旧的、正在进行中的工作流
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 授予工作流写权限，以便它可以创建 Release
permissions:
  contents: write

jobs:
  build-and-release:
    name: 打包客户端文件并发布
    runs-on: ubuntu-latest
    strategy:
      matrix:
        client:
          - name: main
            dockerfile: ./Dockerfile
            docker_compose: docker-compose.yml
            start_script: start.ps1
            image_tag: linstar666/urbanization:latest
            release_tag: release-v
            release_name: 客户端运行包
            zip_name: urbanization.zip
            description: 自动打包的客户端运行文件 (PowerShell 版本)。
          - name: data
            dockerfile: ./Dockerfile.data
            docker_compose: docker-compose.data.yml
            start_script: start-data.ps1
            image_tag: linstar666/urbanization-data:latest
            release_tag: release-data-v
            release_name: 数据管理客户端运行包
            zip_name: urbanization-data.zip
            description: 自动打包的数据管理客户端运行文件 (PowerShell 版本)。
          - name: evaluation
            dockerfile: ./Dockerfile.evaluation
            docker_compose: docker-compose.evaluation.yml
            start_script: start-evaluation.ps1
            image_tag: linstar666/urbanization-evaluation:latest
            release_tag: release-evaluation-v
            release_name: 评估管理客户端运行包
            zip_name: urbanization-evaluation.zip
            description: 自动打包的评估管理客户端运行文件 (PowerShell 版本)。
          - name: score
            dockerfile: ./Dockerfile.score
            docker_compose: docker-compose.score.yml
            start_script: start-score.ps1
            image_tag: linstar666/urbanization-score:latest
            release_tag: release-score-v
            release_name: 评分管理客户端运行包
            zip_name: urbanization-score.zip
            description: 自动打包的评分管理客户端运行文件 (PowerShell 版本)。
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 获取所有历史记录，以便能创建正确的变更日志（如果需要）
          fetch-depth: 0

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 构建、推送并导出镜像
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.client.dockerfile }}
          push: true
          tags: ${{ matrix.client.image_tag }}
          build-args: |
            DATABASE_URL_BUILD=file:../../db/urbanization.db
          outputs: type=docker,dest=./urbanization.tar # 将镜像导出为与 docker load 兼容的 tar 包

      - name: 拉取 alpine 镜像
        run: docker pull alpine:latest

      - name: 保存 alpine 镜像为 tar 包
        run: docker save alpine:latest -o alpine.tar

      - name: 重命名docker-compose文件
        if: matrix.client.name != 'main'
        run: cp ${{ matrix.client.docker_compose }} docker-compose.yml

      - name: 重命名start脚本
        if: matrix.client.name != 'main'
        run: cp ${{ matrix.client.start_script }} start.ps1

      - name: 打包发布文件
        run: |
          zip ${{ matrix.client.zip_name }} docker-compose.yml 使用说明.txt \
          start.ps1 backup.ps1 restore.ps1 entrypoint.sh urbanization.tar alpine.tar

      - name: 生成版本号 (北京时间)
        id: version
        run: echo "tag=$(TZ='Asia/Shanghai' date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      - name: 创建 GitHub Release
        # 使用一个非常流行的第三方 Action 来简化 Release 的创建过程
        uses: softprops/action-gh-release@v2
        with:
          # 使用日期和时间作为版本号，例如 release-v20240725-1030
          tag_name: ${{ matrix.client.release_tag }}${{ steps.version.outputs.tag }}
          name: "${{ matrix.client.release_name }} v${{ steps.version.outputs.tag }}"
          body: |
            ${{ matrix.client.description }}
            
            本次发布包含了最新的：
            - 使用说明文档 (`使用说明.txt`)
            - Docker Compose 配置文件 (`docker-compose.yml`)
            - Docker启动脚本 (`entrypoint.sh`)
            - 本地镜像包 (`urbanization.tar` 和 `alpine.tar`)
            - PowerShell 脚本:
              - 启动应用: `start.ps1`
              - 备份数据: `backup.ps1` 
              - 恢复数据: `restore.ps1`

            请下载下面的 `${{ matrix.client.zip_name }}` 文件，解压后即可使用。
          files: ${{ matrix.client.zip_name }} 